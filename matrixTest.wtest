import matrix.*
describe "Testeamos a Neo" {

  test "Neo es el elegido" {
    assert.that(neo.esElElegido())
  }

  test "Vitalidad inicial de Neo"{
    assert.equals(10, neo.vitalidad())
  }

  test "Neo salta 1 vez"{
    neo.saltar()
    assert.equals(5, neo.vitalidad())
  }
}

describe "Testeamos a Morfeo"{
  
  test "Morfeo es el elegido"{
    assert.notThat(morfeo.esElElegido())
  }

  test "Vitalidad de morfeo si salta 1 vez"{
    morfeo.saltar()
    assert.equals(7, morfeo.vitalidad())
  }

  test "Vitalidad y cansancio de morfeo si salta, se cansa y salta otra vez y descansa"{
    morfeo.saltar()
    assert.equals(7, morfeo.vitalidad())
    assert.that(morfeo.estaCansado())
    morfeo.saltar()
    assert.equals(6, morfeo.vitalidad())
    assert.notThat(morfeo.estaCansado())
  }

}

describe "Testeamos a Trinity"{

  test "Vitalidad de Trinity si salta tres veces y si es el elegido"{
    trinity.saltar()
    trinity.saltar()
    trinity.saltar()
    assert.equals(0, trinity.vitalidad())
    assert.notThat(trinity.esElElegido())
  }
}

describe "Testeamos la nave"{

  test "Cantidad de pasajeros inicial en la nave"{
    assert.equals(3, nave.cantidadPasajeros())
  }

  test "Pasajero de mayor vitalidad en la nave"{
    assert.equals(neo, nave.pasajeroConMayorVitalidad())
  }

  test "la nave está equilibrada"{
    assert.that(nave.estaEquilibrada())
  }

  test "El Elegido está en la nave"{
    assert.that(nave.estaElElegido())
  }

}